#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#define MAXSIZE 10

typedef struct Aluno {
    char nome[20];
    int matricula;
    float nota;
} Aluno;

typedef struct ListaAlunos {
    Aluno alunos[MAXSIZE];
    int numElem;
} ListaAlunos;

typedef struct Aluno {
    char nome[20];
    int matricula;
    float nota;
} Aluno;


typedef struct ListaAlunos {
    Aluno alunos[MAXSIZE];
    int numElem;
} ListaAlunos;


int buscaSentinelaPorNome(ListaAlunos* listaAlunos, char* nome) {
    Aluno alunoSentinela;
    strcpy(alunoSentinela.nome, nome);
    int i = 0;

   
    strcpy(listaAlunos->alunos[listaAlunos->numElem].nome, nome);

    while (strcmp(listaAlunos->alunos[i].nome, nome) != 0) {
        i++;
    }

   
    listaAlunos->numElem--;

    if (i == listaAlunos->numElem) {
        return -1; 
    } else {
        return i; 
    }
}

int buscaBinariaPorNome(ListaAlunos* listaAlunos, char* nome) {
    int esquerda = 0;
    int direita = listaAlunos->numElem - 1;

    while (esquerda <= direita) {
        int meio = esquerda + (direita - esquerda) / 2;

        int comparacao = strcmp(listaAlunos->alunos[meio].nome, nome);

        if (comparacao == 0) {
            return meio; 
        } else if (comparacao < 0) {
            esquerda = meio + 1;
        } else {
            direita = meio - 1;
        }
    }

    return -1; 
}


void insereAlunoOrdenado(ListaAlunos* listaAlunos, Aluno aluno) {
    int i;
    for (i = 0; i < listaAlunos->numElem; i++) {
        if (strcmp(aluno.nome, listaAlunos->alunos[i].nome) < 0) {
            break;
        }
    }
    
    insereAlunoNaLista(listaAlunos, aluno, i);
}

void preencheAluno(Aluno* ptrAluno, 
                   int matricula,
                   float nota,
                   char* nome){
    (*ptrAluno).matricula = matricula;
    (*ptrAluno).nota = nota;
    strcpy((*ptrAluno).nome, nome);
}

void inicializaLista(ListaAlunos* listaAlunos){
    listaAlunos->numElem = 0;
}

void exibeLista(ListaAlunos* listaAlunos){
    int index;
    printf("Exibindo lista...\n");
    for(index = 0; index < listaAlunos->numElem;index++){
        printf("Aluno %d\n", index);
        printf("Nome: %s\n", listaAlunos->alunos[index].nome);
        printf("Matricula: %d\n", listaAlunos->alunos[index].matricula);
        printf("Nota: %.1f\n", listaAlunos->alunos[index].nota);
    }
}

bool insereAlunoNaLista(ListaAlunos* listaAlunos, 
                        Aluno aluno,
                        int posicao){
    if((listaAlunos->numElem >= MAXSIZE) || 
       (posicao < 0) || 
       (posicao > MAXSIZE) ||
       (posicao > listaAlunos->numElem)){
        printf("Insercao em posicao invalida!!!\n");
        return false;
    }
    int index;
    for(index = listaAlunos->numElem; index > posicao;index--){
        listaAlunos->alunos[index] = listaAlunos->alunos[index-1];
    }
    listaAlunos->alunos[posicao] = aluno;
    listaAlunos->numElem++;
    return true;
}

bool excluiElementoDaLista(ListaAlunos* listaAlunos, int posicao){
    if((listaAlunos->numElem >= MAXSIZE) || 
       (posicao < 0) || 
       (posicao > MAXSIZE) ||
       (posicao > listaAlunos->numElem)){
        printf("Exclusao em posicao invalida!!!\n");
        return false;
    }
    int index;
    for(index = posicao; index < listaAlunos->numElem - 1;index++){
        listaAlunos->alunos[index] = listaAlunos->alunos[index+1];
    }
    listaAlunos->numElem--;
    return true;
}

int buscaAlunoPorNome(ListaAlunos* listaAlunos, char* nome) {
    for (int i = 0; i < listaAlunos->numElem; i++) {
        if (strcmp(listaAlunos->alunos[i].nome, nome) == 0) {
            return i; 
        }
    }
    return -1; 
}


int buscaAlunoPorMatricula(ListaAlunos* listaAlunos, int matricula) {
    for (int i = 0; i < listaAlunos->numElem; i++) {
        if (listaAlunos->alunos[i].matricula == matricula) {
            return i; 
        }
    }
    return -1; 
}


Aluno retornaEnesimoAluno(ListaAlunos* listaAlunos, int n) {
    if (n >= 0 && n < listaAlunos->numElem) {
        return listaAlunos->alunos[n];
    } else {
     
        Aluno alunoVazio; 
        alunoVazio.matricula = -1; 
        return alunoVazio;
    }
}

int main() {
    ListaAlunos listaAlunos;
    inicializaLista(&listaAlunos);

    Aluno aluno0, aluno1, aluno2;
    preencheAluno(&aluno0, 15424242, 9.5, "Joao");
    preencheAluno(&aluno1, 10101011, 10, "Ana");
    preencheAluno(&aluno2, 22222222, 7, "Bia");

    insereAlunoNaLista(&listaAlunos, aluno0, 0);
    insereAlunoNaLista(&listaAlunos, aluno1, 0);
    insereAlunoNaLista(&listaAlunos, aluno2, 1);
    
    exibeLista(&listaAlunos);
    printf("Excluindo elemento.............\n");
    excluiElementoDaLista(&listaAlunos, 1);
    exibeLista(&listaAlunos);
    printf("nao foi apagado %s\n", listaAlunos.alunos[2].nome);
    int indicePorNome = buscaAlunoPorNome(&listaAlunos, "Ana");
    if (indicePorNome != -1) {
        printf("Aluno encontrado por nome:\n");
        exibeLista(&listaAlunos);
    } else {
        printf("Aluno não encontrado por nome.\n");
    }

    int indicePorMatricula = buscaAlunoPorMatricula(&listaAlunos, 10101011);
    if (indicePorMatricula != -1) {
        printf("Aluno encontrado por matrícula:\n");
        exibeLista(&listaAlunos);
    } else {
        printf("Aluno não encontrado por matrícula.\n");
    }

    int n = 1; 
    Aluno enesimoAluno = retornaEnesimoAluno(&listaAlunos, n);
    if (enesimoAluno.matricula != -1) {
        printf("Enésimo aluno na lista (n=%d):\n", n);
        printf("Nome: %s\n", enesimoAluno.nome);
        printf("Matrícula: %d\n", enesimoAluno.matricula);
        printf("Nota: %.1f\n", enesimoAluno.nota);
    } else {
        printf("Índice fora dos limites da lista.\n");
    }
    Aluno aluno3, aluno4;
    preencheAluno(&aluno3, 30303030, 8.5, "Carlos");
    preencheAluno(&aluno4, 45454545, 9.0, "Alice");

    insereAlunoOrdenado(&listaAlunos, aluno3);
    insereAlunoOrdenado(&listaAlunos, aluno4);

    exibeLista(&listaAlunos);

    int indicePorNomeSentinela = buscaSentinelaPorNome(&listaAlunos, "Alice");
    if (indicePorNomeSentinela != -1) {
        printf("Aluno encontrado por nome (sentinela):\n");
        exibeLista(&listaAlunos);
    } else {
        printf("Aluno não encontrado por nome (sentinela).\n");
    }

    int indicePorNomeBinaria = buscaBinariaPorNome(&listaAlunos, "Ana");
    if (indicePorNomeBinaria != -1) {
        printf("Aluno encontrado por nome (busca binária):\n");
        exibeLista(&listaAlunos);
    } else {
        printf("Aluno não encontrado por nome (busca binária).\n");
    }

    return 0;
}
